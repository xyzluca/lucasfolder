---
import '@/styles/global.css'
import BaseLayout from '@/layouts/BaseLayout.astro'
import BackButton from '@/components/ui/BackButton.astro'
import GalleryFilter from '@/components/ui/GalleryFilter.astro'
import Footer from '@/components/layout/Footer.astro'
import BaseHead from '@/components/layout/BaseHead.astro'
import ImageOptimizer from '@/components/ui/ImageOptimizer.astro'
import ImageViewer from '@/components/ui/ImageViewer.astro'
import FootnoteScroll from '@/components/widgets/FootnoteScroll.astro'
import CopyCode from '@/components/ui/CopyCode.astro'
import GitHubCard from '@/components/ui/GitHubCard.astro'
import LinkCard from '@/components/ui/LinkCard.astro'
import NeoDBCard from '@/components/ui/NeoDBCard.astro'
import XPOST from '@/components/ui/XPOST.astro'
import JustifiedGallery from '@/components/ui/JustifiedGallery.astro'
import MasonryGallery from '@/components/ui/MasonryGallery.astro'
import { photos } from '@/data/photos'
import { themeConfig } from '@/config'

const categories = Array.from(new Set(photos.map((p) => p.category).filter(Boolean))) as string[]
const galleryImages = photos.map((p) => ({
  id: p.id,
  src: p.src,
  alt: p.alt || p.title || p.id,
  category: p.category
}))

// Special filter options
const specialFilters = ['all', 'photos'] // 'photos' = all except Projects

const title = 'Gallery'
const description = 'Photography'
const ogImage = '/open-graph/gallery.png'
---

<BaseLayout type="post" title={`${title} · ${themeConfig.site.title}`} description={description}>
  <BaseHead
    title={`${title} · ${themeConfig.site.title}`}
    description={description}
    ogImage={ogImage}
    slot="head"
  />
  <div class="post-container">
    <main>
      <div class="prose">
        <BackButton />
        <GalleryFilter categories={categories} specialFilters={specialFilters} />
        <div class="title">
          <h1>Gallery</h1>
        </div>

        <p>A collection of moments captured through my lens.</p>

        <!-- Gallery Controls - Mobile Inline Filters + Layout Switcher -->
        <div class="gallery-controls">
          <div class="gallery-filters-mobile">
            <button class="filter-btn active" data-filter="all">All</button>
            <button class="filter-btn" data-filter="photos">Photos</button>
            {
              categories.map((c) => (
                <button class="filter-btn" data-filter={c}>
                  {c}
                </button>
              ))
            }
          </div>
          <div class="gallery-layouts">
            <button class="layout-btn" data-layout="justified">Justified</button>
            <button class="layout-btn active" data-layout="masonry">Masonry</button>
          </div>
        </div>
      </div>

      <!-- Gallery Content - Constrained Width Like Other Pages -->
      <div class="prose">
        <div class="gallery-wrapper">
          <div id="gallery-justified" class="gallery-pane" hidden>
            <JustifiedGallery images={galleryImages} />
          </div>
          <div id="gallery-masonry" class="gallery-pane">
            <MasonryGallery images={galleryImages} />
          </div>
        </div>
      </div>
    </main>
    <ImageOptimizer />
    <FootnoteScroll />
    <CopyCode />
    <GitHubCard />
    <XPOST />
    <NeoDBCard />
    {themeConfig.post.imageViewer && <ImageViewer />}
    {themeConfig.post.linkCard && <LinkCard />}
    {themeConfig.general.footer && <Footer />}
  </div>
</BaseLayout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const filterButtons = document.querySelectorAll('.filter-btn')
    const layoutButtons = document.querySelectorAll('.layout-btn')
    const justifiedRoot = document.getElementById('gallery-justified')
    const masonryRoot = document.getElementById('gallery-masonry')

    function setActive(buttons: NodeListOf<Element>, target: Element) {
      buttons.forEach((btn) => {
        btn.classList.toggle('active', btn === target)
      })
    }

    function syncMobileFilters(filter: string) {
      filterButtons.forEach((btn) => {
        const element = btn as HTMLElement
        const mobileFilter = element.dataset.filter || 'all'
        element.classList.toggle('active', mobileFilter === filter)
      })
    }

    filterButtons.forEach((btn) =>
      btn.addEventListener('click', () => {
        const filter = (btn as HTMLElement).dataset.filter || 'all'
        document.dispatchEvent(new CustomEvent('gallery:set-filter', { detail: { filter } }))
      })
    )

    document.addEventListener('gallery:filter-change', (event) => {
      const detail =
        event && typeof event === 'object' && 'detail' in event
          ? (event as CustomEvent).detail
          : null
      const filter =
        detail && typeof detail === 'object' && typeof detail.filter === 'string'
          ? detail.filter
          : 'all'
      syncMobileFilters(filter)
    })

    layoutButtons.forEach((btn) =>
      btn.addEventListener('click', () => {
        setActive(layoutButtons, btn)
        if (!justifiedRoot || !masonryRoot) return
        const layout = (btn as HTMLElement).dataset.layout
        if (layout === 'masonry') {
          justifiedRoot.setAttribute('hidden', '')
          masonryRoot.removeAttribute('hidden')
        } else {
          masonryRoot.setAttribute('hidden', '')
          justifiedRoot.removeAttribute('hidden')
        }

        document.dispatchEvent(new CustomEvent('gallery:layout-changed'))

        const url = new URL(window.location.href)
        url.searchParams.set('l', layout || 'justified')
        history.replaceState({}, '', url.toString())
      })
    )

    document.addEventListener('gallery:ready', (event) => {
      const detail =
        event && typeof event === 'object' && 'detail' in event
          ? (event as CustomEvent).detail
          : null
      const filter =
        detail && typeof detail === 'object' && typeof detail.filter === 'string'
          ? detail.filter
          : 'all'
      syncMobileFilters(filter)
    })

    // Apply initial state from URL
    const url = new URL(window.location.href)
    const layout = url.searchParams.get('l') || 'masonry'
    const layoutBtn = Array.from(layoutButtons).find(
      (b) => ((b as HTMLElement).dataset.layout || 'masonry') === layout
    )
    if (layoutBtn) (layoutBtn as HTMLElement).click()
  })
</script>

<style>
  .post-container {
    display: flex;
    flex-direction: column;
    flex: 1;
  }

  .post-container main {
    flex: 1;
  }

  /* Remove bottom margin from prose on gallery page */
  .prose {
    margin-bottom: 0 !important;
  }

  /* Gallery Controls - Mobile First */
  .gallery-controls {
    margin: 0 0 1.75em 0;
    display: flex;
    flex-direction: column;
    gap: 1em;
    font-size: var(--font-size-s);
  }

  .gallery-filters-mobile,
  .gallery-layouts {
    display: flex;
    flex-wrap: wrap;
    gap: 0.75em;
    align-items: center;
  }

  .filter-btn,
  .layout-btn {
    background: none;
    border: none;
    padding: 0;
    font-size: var(--font-size-s);
    font-family: var(--sans);
    font-weight: var(--font-weight-light);
    color: var(--text-secondary);
    cursor: pointer;
    transition: color 0.2s ease-out;
    text-transform: lowercase;
    letter-spacing: 0;
    opacity: 0.75;
  }

  .filter-btn:hover,
  .layout-btn:hover {
    color: var(--text-primary);
    opacity: 1;
  }

  .filter-btn.active,
  .layout-btn.active {
    color: var(--text-primary);
    opacity: 1;
    font-weight: var(--font-weight-regular);
  }

  .filter-btn:focus-visible,
  .layout-btn:focus-visible {
    outline: 2px solid var(--text-tertiary);
    outline-offset: 2px;
  }

  /* Separator dots between buttons */
  .gallery-filters-mobile > button:not(:last-child)::after,
  .gallery-layouts > button:not(:last-child)::after {
    content: '•';
    margin-left: 0.75em;
    color: var(--text-tertiary);
    opacity: 0.5;
    pointer-events: none;
  }

  /* Tablet and up - reorganize layout */
  @media (min-width: 768px) {
    .gallery-controls {
      flex-direction: row;
      align-items: center;
      justify-content: space-between;
    }

    /* Hide mobile filters on desktop (sidebar shows instead) */
    .gallery-filters-mobile {
      display: none;
    }

    .gallery-layouts {
      margin-left: auto;
    }
  }

  /* Gallery Wrapper - Normal Width Like Other Content */
  .gallery-wrapper {
    margin: 1.75em 0;
  }

  .gallery-pane[hidden] {
    display: none;
  }

  /* Ensure images are responsive */
  .gallery-wrapper :global(img) {
    max-width: 100%;
    height: auto;
    display: block;
  }
</style>
