---
import { loadFancybox } from '@/utils/fancybox-loader'

interface Item {
  src: string
  alt?: string
  id?: string
  width?: number
  height?: number
  date?: Date | string
}

interface Props {
  images: Item[]
  minColWidth?: number
  gutter?: number
  lightbox?: boolean
  eager?: number
}

const {
  images = [],
  minColWidth = 280,
  gutter = 16,
  lightbox = true,
  eager = 16
} = Astro.props as Props

function buildSrcSet(url: string): { srcSet?: string; sizes?: string } {
  if (!/images.unsplash.com/.test(url)) return {}
  const base = url
    .replace(/([?&])w=\d+(&?)/, '$1')
    .replace(/([?&])q=\d+(&?)/, '$1')
    .replace(/([?&])fm=[^&]+(&?)/, '$1')
  const widths = [320, 480, 640, 800, 1024, 1280]
  const srcSet = widths
    .map((w) => {
      const q = w <= 480 ? 55 : w <= 800 ? 65 : 72
      return `${base}${base.includes('?') ? '&' : '?'}w=${w}&q=${q}&fm=webp ${w}w`
    })
    .join(', ')
  return { srcSet, sizes: '(max-width: 1200px) 100vw, 1200px' }
}
---

<div class="masonry-wrapper"> 
  <div class="masonry" style={`--gutter: ${gutter}px; --min-col-width: ${minColWidth}px;`}>
    {images.map((img, index) => {
      const responsive = buildSrcSet(img.src)
      const anchorAttrs = lightbox ? { 'data-fancybox': 'masonry', href: img.src } : { href: img.src, target: '_blank' }
      const lqip = /images.unsplash.com/.test(img.src) ? `${img.src.split('?')[0]}?w=24&blur=50&q=30` : undefined
      return (
        <figure class="masonry__item" data-index={index} id={img.id} data-category={(img as any).category || ''}>
          <a {...anchorAttrs} aria-label={img.alt ?? ''}>
            <img
              src={lqip || img.src}
              data-full={img.src}
              srcset={lqip ? undefined : responsive.srcSet}
              sizes={lqip ? undefined : responsive.sizes}
              alt={img.alt ?? ''}
              loading={index < eager ? 'eager' : 'lazy'}
              decoding="async"
              class="masonry__img is-lqip"
            />
          </a>
          {img.alt && <figcaption class="masonry__caption">{img.alt}</figcaption>}
        </figure>
      )
    })}
  </div>
</div>

{lightbox && (
  <script is:inline>
    (async () => {
      const Fancybox = await (await import('/src/utils/fancybox-loader.ts')).loadFancybox()
      if (!document.querySelector('link[data-fancybox-css]')) {
        const link = document.createElement('link')
        link.rel = 'stylesheet'
        link.href = 'https://cdn.jsdelivr.net/npm/@fancyapps/ui/dist/fancybox/fancybox.css'
        link.setAttribute('data-fancybox-css', 'true')
        document.head.appendChild(link)
      }
      Fancybox.bind('[data-fancybox="masonry"]', {
        theme: 'auto',
        Carousel: { transition: 'slide' }
      })
    })()
  </script>
)}

<style>
  .masonry {
    --gutter: 16px;
    --min-col-width: 260px;
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(var(--min-col-width), 1fr));
    gap: var(--gutter);
    width: 100%;
    box-sizing: border-box;
    padding: 0 clamp(0.75rem, 2vw, 2.5rem) 4rem;
  }

  .masonry__item {
    position: relative;
    display: flex;
    flex-direction: column;
    gap: 0.4rem;
    animation: fadeIn 0.6s ease both;
  }

  .masonry__item a {
    display: block;
    border-radius: var(--radius-md, 8px);
    overflow: hidden;
  }

  .masonry__img {
    width: 100%;
    height: auto;
    display: block;
    object-fit: cover;
    transition: transform 0.5s ease, filter 0.6s ease, opacity 0.6s ease;
    filter: blur(10px) saturate(1.1);
    opacity: 0;
    transform: scale(1.02);
  }

  .masonry__img.is-visible {
    filter: none;
    opacity: 1;
    transform: scale(1);
  }

  .masonry__item a:hover .masonry__img {
    transform: scale(1.05);
  }

  .masonry__caption {
    font-size: 0.75rem;
    opacity: 0.7;
    line-height: 1.2;
    padding-left: 0.25rem;
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(8px); }
    to { opacity: 1; transform: translateY(0); }
  }
</style>

<script>
  // IntersectionObserver fade/blur reveal
  const io = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        entry.target.classList.add('is-visible')
        io.unobserve(entry.target)
      }
    })
  }, { threshold: 0.1 })

  window.requestAnimationFrame(() => {
    document.querySelectorAll('.masonry__img').forEach((img) => io.observe(img))
  })

  // Upgrade LQIP images after load
  document.querySelectorAll<HTMLImageElement>('.masonry__img.is-lqip').forEach((img) => {
    if (img.complete) upgrade()
    else img.addEventListener('load', upgrade, { once: true })
    function upgrade () {
      const full = img.dataset.full
      if (!full) return
      if (img.src === full && !img.classList.contains('is-lqip')) return
      const base = full
        .replace(/([?&])w=\d+(&?)/,'$1')
        .replace(/([?&])q=\d+(&?)/,'$1')
        .replace(/([?&])fm=[^&]+(&?)/,'$1')
      const widths=[320,480,640,800,1024,1280]
      const srcSet=widths.map(w=>{const q=w<=480?55:w<=800?65:72;return `${base}${base.includes('?')?'&':'?'}w=${w}&q=${q}&fm=webp ${w}w`}).join(', ')
      img.src = full
      img.srcset = srcSet
      img.sizes = '(max-width: 1200px) 100vw, 1200px'
      img.classList.remove('is-lqip')
    }
  })
</script>