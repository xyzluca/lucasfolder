---
interface ImageItem {
  src: string
  alt?: string
  id?: string
}

interface Props {
  images: ImageItem[]
  preview?: boolean
}

const { images = [], preview = false } = Astro.props as Props
---

<section class={`photo-grid ${preview ? 'photo-grid--preview' : ''}`} aria-label="Photo gallery">
  <div class="photo-grid__container">
    {
      images.map((image) => (
        <figure class="photo-grid__item" id={image.id}>
          {preview ? (
            <a
              href={`/gallery#${image.id}`}
              aria-label={`Open ${image.alt ?? image.id} in gallery`}
            >
              <img src={image.src} alt={image.alt ?? ''} loading="lazy" class="photo-grid__img" />
            </a>
          ) : (
            <img src={image.src} alt={image.alt ?? ''} loading="lazy" class="photo-grid__img" />
          )}
        </figure>
      ))
    }
  </div>
</section>

<style is:global>
  /* PhotoGrid styles inspired by common astro-photo-grid patterns */
  .photo-grid__container {
    column-gap: 1rem;
    column-count: 1;
    column-fill: balance;
  }

  @media (min-width: 640px) {
    .photo-grid__container {
      column-count: 2;
    }
  }

  @media (min-width: 1024px) {
    .photo-grid__container {
      column-count: 3;
    }
  }

  @media (min-width: 1440px) {
    .photo-grid__container {
      column-count: 4;
    }
  }

  .photo-grid__item {
    margin: 0 0 1rem;
    break-inside: avoid;
    overflow: hidden;
    border-radius: var(--border-radius-lg);
  }

  .photo-grid__item a {
    display: block;
    border-radius: inherit;
  }

  .photo-grid__img {
    width: 100%;
    height: auto;
    display: block;
    border-radius: inherit;
    transform-origin: center center;
    transition:
      transform 0.25s ease,
      filter 0.4s ease,
      opacity 0.4s ease;
    opacity: 0;
    filter: blur(6px);
    transform: translateY(12px);
  }

  .photo-grid__img.is-visible {
    opacity: 1;
    filter: none;
    transform: translateY(0);
  }

  .photo-grid--preview .photo-grid__img {
    border-radius: var(--border-radius-md);
  }
</style>

<script>
  // IntersectionObserver to reveal images with a nice fade/blur animation
  const io = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add('is-visible')
          io.unobserve(entry.target)
        }
      })
    },
    { threshold: 0.08 }
  )

  // Observe images inside the current component scope
  // Delay to ensure DOM exists when this script runs on client
  window.requestAnimationFrame(() => {
    document.querySelectorAll('.photo-grid__img').forEach((img) => io.observe(img))
  })
</script>
