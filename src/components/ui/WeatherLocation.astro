---
// WeatherLocation.astro - Display local timezone and weather conditions
import { MapPin, Cloud, CloudRain, Sun, CloudDrizzle, CloudSnow, CloudFog } from 'lucide-astro'
---

<div class="weather-location" id="weather-location">
  <div class="location-info">
    <div class="weather-info" id="weather-info">
      <span class="weather-icon" id="weather-icon">
        <Sun size={16} />
      </span>
      <span class="timezone" id="timezone">Cologne, Germany Loading...</span>
    </div>
  </div>
</div>

<script>
  import { Sun, Cloud, CloudRain, CloudDrizzle, CloudSnow, CloudFog, Zap } from 'lucide-astro'

  async function updateWeatherAndLocation() {
    const timezoneEl = document.getElementById('timezone')
    const weatherIconEl = document.getElementById('weather-icon')

    if (!timezoneEl || !weatherIconEl) return

    try {
      // Cologne, Germany coordinates
      const latitude = 50.9375
      const longitude = 6.9603
      const timezone = 'Europe/Berlin'

      const time = new Date().toLocaleTimeString('de-DE', {
        timeZone: timezone,
        hour: '2-digit',
        minute: '2-digit',
        hour12: false
      })
      timezoneEl.textContent = `${time} Cologne, Germany`

      try {
        // Fetch weather data from our API endpoint
        const response = await fetch(`/api/weather?lat=${latitude}&lon=${longitude}`)

        if (!response.ok) {
          throw new Error('Weather data unavailable')
        }

        const data = await response.json()

        // Update icon based on weather condition
        updateWeatherIcon(weatherIconEl, data.weather)
      } catch (error) {
        console.error('Weather fetch error:', error)
        // Fallback already shown in HTML
      }
    } catch (error) {
      console.error('Error updating weather/location:', error)
    }
  }

  function updateWeatherIcon(element: HTMLElement, condition: string) {
    const iconMap: Record<string, string> = {
      clear:
        '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="4"/><path d="M12 2v2"/><path d="M12 20v2"/><path d="m4.93 4.93 1.41 1.41"/><path d="m17.66 17.66 1.41 1.41"/><path d="M2 12h2"/><path d="M20 12h2"/><path d="m6.34 17.66-1.41 1.41"/><path d="m19.07 4.93-1.41 1.41"/></svg>',
      clouds:
        '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M17.5 19H9a7 7 0 1 1 6.71-9h1.79a4.5 4.5 0 1 1 0 9Z"/></svg>',
      rain: '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242"/><path d="M16 14v6"/><path d="M8 14v6"/><path d="M12 16v6"/></svg>',
      drizzle:
        '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242"/><path d="M8 19v1"/><path d="M8 14v1"/><path d="M16 19v1"/><path d="M16 14v1"/><path d="M12 21v1"/><path d="M12 16v1"/></svg>',
      snow: '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242"/><path d="M8 15h.01"/><path d="M8 19h.01"/><path d="M12 17h.01"/><path d="M12 21h.01"/><path d="M16 15h.01"/><path d="M16 19h.01"/></svg>',
      fog: '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242"/><path d="M16 17H7"/><path d="M17 21H9"/></svg>',
      thunderstorm:
        '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M6 16.326A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 .5 8.973"/><path d="m13 12-3 5h4l-3 5"/></svg>'
    }

    const icon = iconMap[condition.toLowerCase()] || iconMap.clear
    element.innerHTML = icon
  }

  // Update on page load
  updateWeatherAndLocation()

  // Update time every minute
  setInterval(() => {
    const timezoneEl = document.getElementById('timezone')
    if (timezoneEl) {
      const timezone = 'Europe/Berlin'
      const time = new Date().toLocaleTimeString('de-DE', {
        timeZone: timezone,
        hour: '2-digit',
        minute: '2-digit',
        hour12: false
      })
      timezoneEl.textContent = `Cologne, Germany â€¢ ${time}`
    }
  }, 60000)
</script>

<style>
  .weather-location {
    display: flex;
    align-items: center;
    gap: 1rem;
    font-size: var(--font-size-s);
    color: var(--text-secondary);
    opacity: 0.75;
  }

  .location-info,
  .weather-info {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .weather-icon {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    min-width: 16px;
  }

  .weather-icon svg {
    color: var(--text-secondary);
  }

  @media (max-width: 768px) {
    .weather-location {
      flex-direction: column;
      gap: 0.25rem;
      font-size: var(--font-size-xs);
    }
  }
</style>
